import java.util.*;
class Main {
  public static int n;
  public static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
  public static int[] times = new int[501];
  public static int[] inbounds = new int[501];
  public static void topology(){
    Queue<Integer> queue = new LinkedList<Integer>();
    int[] results = new int[501];
    for(int i=1; i<=n; i++){
      results[i] = times[i];
      if(inbounds[i] == 0){
        queue.add(i);
      }
    }

    while(!queue.isEmpty()){
      int now = queue.poll();
      for(int i=0; i<graph.get(now).size(); i++){   
        int next = graph.get(now).get(i);
        results[next] = Math.max(results[next], results[now] + times[next]);
        inbounds[next]--;
        if(inbounds[next] == 0){
          queue.add(next);
        }
      }
    }
    
    for(int i=1; i<=n; i++){
      System.out.println(results[i]);
    }
  }
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    n = sc.nextInt();
    for(int i=0; i<=n; i++){
      graph.add(new ArrayList<Integer>());
    }
    for(int i=1; i<=n; i++){
      times[i] = sc.nextInt();
      
      while(true){
        int num = sc.nextInt();
        if(num == -1)
          break;
        graph.get(num).add(i);
        inbounds[i]++;
      }
    }
    topology();
  }
}
