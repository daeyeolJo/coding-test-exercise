import java.util.*;
import java.io.*;
class Main {
  public static final int INF = (int)1e9;
  public static int n, m, x, k;
  public static int[][] graph = new int[101][101]; 
  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    int n = Integer.parseInt(st.nextToken());
    int m = Integer.parseInt(st.nextToken());

    for(int i=0; i<101; i++){
      Arrays.fill(graph[i], INF);
    }

    for(int i=1; i<=n; i++){
      graph[i][i] = 0;
    }

    for(int i=1; i<=m; i++){
      st = new StringTokenizer(br.readLine());
      int a  = Integer.parseInt(st.nextToken());
      int b = Integer.parseInt(st.nextToken());
      graph[a][b] = 1;
      graph[b][a] = 1;
    }
    st = new StringTokenizer(br.readLine());
    int x = Integer.parseInt(st.nextToken());
    int k = Integer.parseInt(st.nextToken());

    for(int p=1; p<=n; p++){
      for(int a=1; a<=n; a++){
        for(int b=1; b<=n; b++){
          if(a == b){
            continue;
          } else{
            graph[a][b] = Math.min(graph[a][p] + graph[p][b], graph[a][b]);
          }
        }
      }
    }
    int toK = graph[1][k];
    int toX = graph[k][x];
    if(toK == INF || toX == INF){
      System.out.print(-1);
    } else{
      System.out.print(toK + toX);
    } 
  }
}
